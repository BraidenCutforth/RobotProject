#pragma config(Sensor, in1,    leftIR,         sensorReflection)
#pragma config(Sensor, in2,    rightIR,        sensorReflection)
#pragma config(Sensor, dgtl1,  RightSwitch,    sensorTouch)
#pragma config(Sensor, dgtl2,  LeftSwitch,     sensorTouch)
#pragma config(Sensor, dgtl3,  rangeFinder,    sensorSONAR_cm)
#pragma config(Sensor, dgtl5,  redLED,         sensorDigitalOut)
#pragma config(Sensor, dgtl6,  yellowLED,      sensorDigitalOut)
#pragma config(Sensor, dgtl7,  greenLED,       sensorDigitalOut)
#pragma config(Sensor, dgtl8,  blueLED,        sensorDigitalOut)
#pragma config(Sensor, dgtl9,  RightButton,    sensorTouch)
#pragma config(Sensor, dgtl10, LeftButton,     sensorTouch)
#pragma config(Sensor, dgtl11, Bumper,         sensorTouch)
#pragma config(Motor,  port2,           Left,          tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           Right,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,          Arm,           tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*
------------------ CODE NOTES -------------------------------------------------------------------------------------
This code was designed by Braiden Cutforth, Ryan Ferguson,
and Marco Agostini and written by Braiden cutforth with the
monitorLight(); function being adapted from code provided to
us by our instructor, Dr. Michael McGuire
-------------------------------------------------------------------------------------------------------------------
*/


typedef enum {
	Search = 0,
	Orient,
	Approach,
	Position,
	Drop,
	approachWall,
	Finish
}T_State; //states for the FSM

/*
-------------------------------------------------------------------------------------------------------------------
Global intergers defined, they are used throughout
a few functions. They are set in the monitorLight
function and are used to store the max IR levels
in the past 100ms, and several functions use these
values to determine if it is lined up with the beacon
as well as if it in the optimal drop zone for dropping
the object. leftMotor and rightMotor are used in the
correction function to change motor speeds according
to the IR values to keep it facing the puck.
-------------------------------------------------------------------------------------------------------------------
*/

int maxLevelIR1, maxLevelIR2;
int leftMotor, rightMotor;

/*
-------------------------------------------------------------------------------------------------------------------
Defined constants used throughout the progrgam.
-------------------------------------------------------------------------------------------------------------------
*/


const int light_threshold = 370; //threshold for finding the IR source
const int orientation_constant = 350; //constant to orient the robot correctly
const float correctionFactor = 0.02;



/*
-------------------------------------------------------------------------------------------------------------------
This is the code avaialable on course spaces for 10hz light detection
that has been adapted for use with two IR sensors instead of 1
-------------------------------------------------------------------------------------------------------------------
*/

// Perform processing of measurements.
// Should be called with rate of at least 20 Hertz for proper detection of puck.
bool monitorLight()
{
	static int minLevelIR1 = 4096;	// Minimum light level seen by IR sensor 1
	//static int maxLevelIR1 = 0;			// Maximum light level seen by IR sensor 1
	static int diffLevelIR1 = 0;		// Delta between maximum and minimum seen in last 0.1 seconds
	static int minLevelIR2 = 4096; //Min light level seen by IR 2
	//static int maxLevelIR2 = 0; //Maximum light level seen by IR 2
	static int diffLevelIR2 = 0; //Delat between max and min for IR 2 in 0.1 sec

	int lightLevel1 = SensorValue[leftIR];
	int lightLevel2 = SensorValue[rightIR];
	bool returnValue;

	// Check if 100 msecs have elapsed.
	if ( time1[T1] > 100 )  {

		// 100 msecs have elapsed.  Compute delta of light level.
		diffLevelIR1 = maxLevelIR1 - minLevelIR1;
		diffLevelIR2 = maxLevelIR2 - minLevelIR2;

		// Reset calculation for next 100 msecs.
		maxLevelIR1 = 0;
		minLevelIR1 = 4096;
		maxLevelIR2 = 0;
		minLevelIR2 = 4096;
		clearTimer(T1);

		} else {

		// Check for new minimum/maximum light levels.
		if ( lightLevel1 < minLevelIR1 ) {
			minLevelIR1 = lightLevel1;
			} else if ( lightLevel1 > maxLevelIR1 ) {
			maxLevelIR1 = lightLevel1;
		}

		if (lightLevel2 < minLevelIR2){
			minLevelIR2 = lightLevel2;
			} else if (lightLevel2 > maxLevelIR2){
			maxLevelIR2 = lightLevel2;
		}
	}

	// Check if light level difference over threshold.
	if ( diffLevelIR1 > light_threshold || diffLevelIR2 > light_threshold ) {
		returnValue = true;
		} else {
		returnValue = false;
	}

	return(returnValue);
}

/*
---------------------------------------------------------------------------------------------------------------
This function checks to see if the puck is in
correct orientation for dropping.
---------------------------------------------------------------------------------------------------------------
*/

bool dropZone(){
	bool return1;
	int difference;
	difference = abs(maxLevelIR1 - maxLevelIR2);
	if(SensorValue[rangeFinder] >= 12 && SensorValue[rangeFinder] <= 17  && difference <= orientation_constant){
		return1 = true;
	}
	else{
		return1 = false;
	}
	return return1;
}

/*
---------------------------------------------------------------------------------------------------------------
This function corrects the individual motor speeds to
slowly adjust the direction of the robot to approach the
beacon head on.
---------------------------------------------------------------------------------------------------------------
*/

void correction(){
	int diff, speedCorrection;
	float temp;

	diff = maxLevelIR1 - maxLevelIR2;
	if (diff < 0){
		diff = abs(diff);
		temp = diff*correctionFactor;
		speedCorrection = round(temp);
		leftMotor = (32 + speedCorrection);
		rightMotor = 30;
		}else if(diff > 0){
		temp = diff*correctionFactor;
		speedCorrection = round(temp);
		rightMotor = (30 + speedCorrection);
		leftMotor = 32;
		}else if(diff == 0){
		rightMotor = 30;
		leftMotor = 32;
	}
}

/*
---------------------------------------------------------------------------------------------------------------------------
Function to drop object.
---------------------------------------------------------------------------------------------------------------------------
*/

void dropObject(){
	motor[Arm] = -50;
	delay(350);
	motor[Arm] = 0;
	motor[Left] = -50;
	motor[Right] = -50;
	delay(1000);
	motor[Right] = -25;
	motor[Left] = 25;
	delay(2000);
	motor[Left] = 0;
	motor[Right] = 0;
	motor[Arm] = 50;
	delay(250);
	motor[Arm] = 0;
}


/*
------------------------------------------------------------------------------------------------------------------------------
This function checks if the robot is facing the
puck properly for drop off and approach.
------------------------------------------------------------------------------------------------------------------------------
*/

bool isLinedUp(){
	int IRdifference;
	bool return2;
	bool lightFound;
	int leftValue, rightValue;
	rightValue = maxLevelIR2;
	leftValue = maxLevelIR1;
	lightFound = monitorLight();
	IRdifference = leftValue - rightValue;
	IRdifference = abs(IRdifference);
	if (IRdifference <= orientation_constant && (lightFound)){
		return2 = true;
		}else{
		return2 = false;
	}//else
	return return2;
}//isLinedUp

/*
--------------------------------------------------------------------------------------------------------------------------
This function is used to detect if the robot has hit
anything by checking the values of the left, right
and back bumpers. If values are detected then the
robot will make the appropriate movements to get away
from the obstruction and it will resume the task that
it was doing. There are cases for all possbile button
combinations. Delays are used to make sure the robot
actually moves an adequate distance from the obstruction
before resuming the other task.
--------------------------------------------------------------------------------------------------------------------------
*/

void bumperCheck(){
	while(SensorValue[RightButton] && SensorValue[LeftButton] && SensorValue[Bumper]){//All Bumpers
		motor[Left] = 45;
		motor[Right] = 40;
		delay(750);
		}while(SensorValue[RightButton] && SensorValue[LeftButton] && !(SensorValue[Bumper])){//Left and Right
		motor[Left] = 45;
		motor[Right] = 40;
		delay(750);
		}while(SensorValue[RightButton] && !(SensorValue[LeftButton]) && SensorValue[Bumper]){//Right and Back
		motor[Right] = 45;
		motor[Left] = 35;
		delay(1000);
		}while(!(SensorValue[RightButton]) && SensorValue[LeftButton] && SensorValue[Bumper]){//Left and Back
		motor[Left] = 45;
		motor[Right] = 35;
		delay(1000);
		}while(SensorValue[RightButton] && !(SensorValue[LeftButton]) && !(SensorValue[Bumper])){//Right
		motor[Right] = 45;
		motor[Left] = 35;
		delay(1000);
		}while(!(SensorValue[RightButton]) && SensorValue[LeftButton] && !(SensorValue[Bumper])){//Left
		motor[Left] = 45;
		motor[Right] = 35;
		delay(1000);
		}while(!(SensorValue[RightButton]) && !(SensorValue[LeftButton]) && SensorValue[Bumper]){//Back
		motor[Left] = 35;
		motor[Right] = 35;
		delay(1000);
	}
}


/*
--------------------------------------------------------------------------------------------------------------------------
This is the main function that switches between robot states
and calls to the functions listed above.
--------------------------------------------------------------------------------------------------------------------------
*/


task main()
{
	//Starts with the input state.
	T_State robot_state = Search;
	bool beaconVisible; //stores if beacon is visible.
	bool oriented; // stores if robot is oriented to face beacon.
	bool dropRange;// Stores if the robot is in dropping range.
	while(true) {

		// Update sensor values (must be called at least 20 times a second for proper performance).
		beaconVisible = monitorLight(); //checks for IR signal
		oriented = isLinedUp(); //checks if it is oriented
		dropRange = dropZone(); //Checks if its in the drop zone
		bumperCheck();
		correction();


		switch( robot_state ) {

			/*The search state searches for the IR signal,
			if found it will change to orient state*/

		case Search:
			SensorValue[redLED] = 1;
			SensorValue[yellowLED] = 0;
			SensorValue[greenLED] = 0;
			SensorValue[blueLED] = 0;
			if ( beaconVisible ) {
				motor[Left] = 0;
				motor[Right] = 0;
				robot_state = Orient;
				} else {
				motor[Left] = 35;
				motor[Right] = -35;
				robot_state = Search;
			}
			break;

			/* The orient state makes the robot face the puck directly.
			If it is facing the object it will change state to approach.*/

		case Orient:
			SensorValue[redLED] = 1;
			SensorValue[yellowLED] = 1;
			SensorValue[greenLED] = 0;
			SensorValue[blueLED] = 0;
			int leftSensor, rightSensor;
			leftSensor = maxLevelIR1;
			rightSensor = maxLevelIR2;
			if(!beaconVisible){
				robot_state = Search;
			}
			else if(oriented){
				robot_state = Approach;
				}else{
				if(leftSensor > (rightSensor+orientation_constant)){
					motor[Right] = 30;
					motor[Left] = -30;
					}else if(rightSensor > (leftSensor+orientation_constant)){
					motor[Right] = -30;
					motor[Left] = 30;
					}else{
					motor[Right] = 0;
					motor[Left] = 0;
				}
				robot_state = Orient;
			}
			break;

			/* This function gets the robot to spin around
			and find the closest point to the wall, then lines
			up with that point*/

		case Approach:
			SensorValue[redLED] = 1;
			SensorValue[yellowLED] = 1;
			SensorValue[greenLED] = 1;
			SensorValue[blueLED] = 0;
			if(!beaconVisible){
				motor[Left] = 0;
				motor[Right] = 0;
				robot_state = Search;
				}else if(maxLevelIR1>3600 || maxLevelIR2>3600){
				robot_state = Position;
				} else {
				motor[Left] = leftMotor;
				motor[Right] = rightMotor;
				robot_state = Approach;
			}
			break;

			/* This case positions the robot
			in the dropping state*/

		case Position:
			SensorValue[redLED] = 1;
			SensorValue[yellowLED] = 1;
			SensorValue[greenLED] = 0;
			SensorValue[blueLED] = 0;
			int leftSensor2, rightSensor2;
			leftSensor2 = maxLevelIR1;
			rightSensor2 = maxLevelIR2;
			int dif = abs(leftSensor2 - rightSensor2);
			if(!beaconVisible){
				robot_state = Search;
				}else if(dropRange){
				motor[Left] = 0;
				motor[Right] = 0;
				robot_state = Drop;
				}else{
				if(leftSensor2 > (rightSensor2+orientation_constant)){
					motor[Right] = 25;
					motor[Left] = -25;
					}else if(rightSensor2 > (leftSensor2+orientation_constant)){
					motor[Right] = -25;
					motor[Left] = 25;
					}else if(SensorValue[rangeFinder] < 12 && dif <= orientation_constant ){
					motor[Left] = -25;
					motor[Right] = -25;
					}else if(SensorValue[rangeFinder] > 17 && dif <= orientation_constant){
					motor[Left] = 25;
					motor[Right] = 25;
					}else{
					motor[Right] = 0;
					motor[Left] = 0;
				}
				robot_state = Position;
			}
			break;

			/* This case drops the object, and verifies that
			it is actually in the correct position before
			dropping */

		case Drop:
			SensorValue[redLED] = 1;
			SensorValue[yellowLED] = 1;
			SensorValue[greenLED] = 1;
			SensorValue[blueLED] = 1;
			motor[Right] = 0;
			motor[Left] = 0;
			if (!beaconVisible)robot_state = Search;
			else if(!oriented)robot_state = Position;
			else if(!dropRange)robot_state = Position;
			else{
				dropObject();
				robot_state = approachWall;
				//clearTimer(T2);
			}
			break;

			/*This is the case that makes the robot approach the wall */

		case approachWall:
			SensorValue[redLED] = 1;
			SensorValue[yellowLED] = 1;
			SensorValue[greenLED] = 1;
			SensorValue[blueLED] = 0;
			if(SensorValue[LeftSwitch] == 0 && SensorValue[RightSwitch] == 0){
				motor[Left] = 56;
				motor[Right] = 50;
				robot_state = approachWall;
				}else if(SensorValue[LeftSwitch] == 1 && SensorValue[RightSwitch] == 0){
				motor[Left] = 0;
				motor[Right] = 25;
				robot_state = approachWall;
				}else if(SensorValue[LeftSwitch] == 0 && SensorValue[RightSwitch] == 1){
				motor[Left] = 25;
				motor[Right] = 0;
				robot_state = approachWall;
				}else if(SensorValue[LeftSwitch] == 1 && SensorValue[RightSwitch] == 1){
				motor[Left] = 0;
				motor[Right] = 0;
				robot_state = Finish;
			}
			break;

		case Finish:

			motor[Left] = 0;
			motor[Right] = 0;
			SensorValue[redLED] = 0;
			SensorValue[yellowLED] = 0;
			SensorValue[greenLED] = 1;
			SensorValue[blueLED] = 1;

			break;


		default:
			// This should never happen.
			robot_state = Search;

		} // switch( robot_state)

	}  // while(true)

}
//Testing a pull request.
